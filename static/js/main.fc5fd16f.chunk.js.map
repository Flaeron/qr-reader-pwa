{"version":3,"sources":["components/Navigation/Navigation.js","components/QrCodeReader/QrCodeReader.js","components/QrCodeReader/LecacyQrCodeReader.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","NavLink","exact","to","QrCodeReader","state","result","handleScan","data","_this","setState","handleError","err","console","error","this","className","lib_default","delay","onError","onScan","Component","LecacyQrCodeReader","imageLoaded","qrReader","React","createRef","openImageDialog","current","ref","onImageLoad","legacyMode","onClick","App","BrowserRouter","react","components_Navigation_Navigation","Switch","Route","path","component","Redirect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fc5fd16f.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './Navigation.css';\n\nconst Navigation = () => (\n  <nav>\n    <ul>\n      <li>\n        <NavLink exact to=\"/qr-reader-pwa\">\n          Default\n        </NavLink>\n      </li>\n      <li>\n        <NavLink exact to=\"/qr-reader-pwa/legacy\">\n          Legacy\n        </NavLink>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navigation;\n","import React, { Component } from 'react';\nimport QrReader from 'react-qr-reader';\n\nimport './QrCodeReader.css';\n\nclass QrCodeReader extends Component {\n  state = {\n    result: 'No result',\n  };\n\n  handleScan = (data) => {\n    if (data) {\n      this.setState({\n        result: data,\n      });\n    }\n  };\n\n  handleError = (err) => {\n    console.error(err);\n  };\n\n  render() {\n    const { result } = this.state;\n  \n    return (\n      <div className=\"qr-reader-wrapper\">\n        <QrReader\n          className=\"qr-reader\"\n          delay={300}\n          onError={this.handleError}\n          onScan={this.handleScan}\n        />\n        <p>{result}</p>\n      </div>\n    );\n  }\n}\n\nexport default QrCodeReader;\n","import React, { Component } from 'react';\nimport QrReader from 'react-qr-reader';\n\nimport './QrCodeReader.css';\n\nclass LecacyQrCodeReader extends Component {\n  state = {\n    result: 'No result',\n    imageLoaded: false,\n  };\n\n  qrReader = React.createRef();\n\n  handleScan = (data) => {\n    if (data) {\n      this.setState({\n        result: data,\n      });\n    }\n  };\n\n  handleError = (err) => {\n    console.error(err);\n  };\n\n  openImageDialog = () => {\n    this.qrReader.current.openImageDialog();\n  };\n\n  render() {\n    const { result } = this.state;\n  \n    return (\n      <div className=\"qr-reader-wrapper\">\n        <QrReader\n          ref={this.qrReader}\n          className=\"qr-reader\"\n          delay={300}\n          onError={this.handleError}\n          onScan={this.handleScan}\n          onImageLoad={this.onImageLoad}\n          legacyMode\n        />\n        <button onClick={this.openImageDialog}>Find QR Code</button>\n        <p>{result}</p>\n      </div>\n    );\n  }\n}\n\nexport default LecacyQrCodeReader;\n","import React, { Component, Fragment } from 'react';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n} from 'react-router-dom';\n\nimport Navigation from './components/Navigation/Navigation';\nimport QrCodeReader from './components/QrCodeReader/QrCodeReader';\nimport LecacyQrCodeReader from './components/QrCodeReader/LecacyQrCodeReader';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Fragment>\n            <header>\n              <Navigation />\n            </header>\n            <main>\n              <Switch>\n                <Route exact path=\"/qr-reader-pwa/\" component={QrCodeReader} />\n                <Route exact path=\"/qr-reader-pwa/legacy\" component={LecacyQrCodeReader} />\n                <Redirect to=\"/qr-reader-pwa\" />\n              </Switch>\n            </main>\n          </Fragment>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}