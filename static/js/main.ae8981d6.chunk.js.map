{"version":3,"sources":["components/Navigation/Navigation.js","components/QrCodeReader/QrCodeReader.js","components/QrCodeReader/LecacyQrCodeReader.js","App.js","serviceWorker.js","helpers/index.js","index.js"],"names":["Navigation","react_default","a","createElement","NavLink","exact","to","QrCodeReader","state","result","handleScan","data","_this","setState","handleError","err","console","error","this","className","lib_default","delay","onError","onScan","Component","LecacyQrCodeReader","imageLoaded","qrReader","React","createRef","askCameraPermision","navigator","getUserMedia","video","checkCameraPermision","_callee","permision","regenerator_default","wrap","_context","prev","next","mediaDevices","enumerateDevices","then","devices","forEach","device","kind","catch","log","name","message","abrupt","stop","openImageDialog","current","_this2","setTimeout","ref","onImageLoad","legacyMode","onClick","App","BrowserRouter","react","components_Navigation_Navigation","Switch","Route","path","component","Redirect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","userAgent","toLowerCase","test","isIos","document","getElementById","href","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ae8981d6.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './Navigation.css';\n\nconst Navigation = () => (\n  <nav>\n    <ul>\n      <li>\n        <NavLink exact to=\"/qr-reader-pwa\">\n          Default\n        </NavLink>\n      </li>\n      <li>\n        <NavLink exact to=\"/qr-reader-pwa/legacy\">\n          Legacy\n        </NavLink>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navigation;\n","import React, { Component } from 'react';\nimport QrReader from 'react-qr-reader';\n\nimport './QrCodeReader.css';\n\nclass QrCodeReader extends Component {\n  state = {\n    result: 'No result',\n  };\n\n  handleScan = (data) => {\n    if (data) {\n      this.setState({\n        result: data,\n      });\n    }\n  };\n\n  handleError = (err) => {\n    console.error(err);\n  };\n\n  render() {\n    const { result } = this.state;\n  \n    return (\n      <div className=\"qr-reader-wrapper\">\n        <QrReader\n          className=\"qr-reader\"\n          delay={300}\n          onError={this.handleError}\n          onScan={this.handleScan}\n        />\n        <p>{result}</p>\n      </div>\n    );\n  }\n}\n\nexport default QrCodeReader;\n","import React, { Component } from 'react';\nimport QrReader from 'react-qr-reader';\n\nimport './QrCodeReader.css';\n\nclass LecacyQrCodeReader extends Component {\n  state = {\n    result: 'No result',\n    imageLoaded: false,\n  };\n\n  qrReader = React.createRef();\n\n  componentDidMount() {\n    setTimeout(() => {\n      if (this.checkCameraPermision()) {\n        console.log('have permision');\n      } else {\n        this.askCameraPermision();\n        console.log('do not have permision');\n      }\n    }, 4000);\n  }\n\n  askCameraPermision = () => {\n    navigator.getUserMedia(\n      { video: true },\n      () => {},\n      (err) => console.error(err)\n    );\n  };\n\n  checkCameraPermision = async () => {\n    let permision = false;\n\n    await navigator.mediaDevices\n      .enumerateDevices()\n      .then((devices) => {\n        devices.forEach((device) => {\n          if (device.kind === 'videoinput') {\n            permision = true;\n          }\n        });\n      })\n      .catch(function(err) {\n        console.log(err.name + ': ' + err.message);\n      });\n\n    return permision;\n  };\n\n  handleScan = (data) => {\n    if (data) {\n      this.setState({\n        result: data,\n      });\n    }\n  };\n\n  handleError = (err) => {\n    console.error(err);\n  };\n\n  openImageDialog = () => {\n    this.qrReader.current.openImageDialog();\n  };\n\n  render() {\n    const { result } = this.state;\n\n    return (\n      <div className=\"qr-reader-wrapper\">\n        <QrReader\n          ref={this.qrReader}\n          className=\"qr-reader\"\n          delay={300}\n          onError={this.handleError}\n          onScan={this.handleScan}\n          onImageLoad={this.onImageLoad}\n          legacyMode\n        />\n        <button onClick={this.openImageDialog}>Find QR Code</button>\n        <p>{result}</p>\n      </div>\n    );\n  }\n}\n\nexport default LecacyQrCodeReader;\n","import React, { Fragment } from 'react';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n} from 'react-router-dom';\n\nimport Navigation from './components/Navigation/Navigation';\nimport QrCodeReader from './components/QrCodeReader/QrCodeReader';\nimport LecacyQrCodeReader from './components/QrCodeReader/LecacyQrCodeReader';\n\nimport './App.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <Router>\n      <Fragment>\n        <header>\n          <Navigation />\n        </header>\n        <main>\n          <Switch>\n            <Route exact path=\"/qr-reader-pwa\" component={QrCodeReader} />\n            <Route\n              exact\n              path=\"/qr-reader-pwa/legacy\"\n              component={LecacyQrCodeReader}\n            />\n            <Redirect to=\"/qr-reader-pwa\" />\n          </Switch>\n        </main>\n      </Fragment>\n    </Router>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const isIos = () => {\n  const userAgent = window.navigator.userAgent.toLowerCase();\n  return /iphone|ipad|ipod/.test(userAgent);\n};\n\nexport const isInStandaloneMode = () =>\n  'standalone' in window.navigator && window.navigator.standalone;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { isIos } from './helpers';\n\nif (isIos()) {\n  document.getElementById('manifest').href = 'ios-manifest.json';\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}